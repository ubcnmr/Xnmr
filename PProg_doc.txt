June 10,2001

Rules for pulse programming.

start with:

#include "pulse.h" or pulse-pb.h

have:
main(){
pulse_program_init(); right at the top.

Then:
do{
   GET_PARAMETER_FLOAT (); macros

   begin();

Then 
   EVENT time {label,value} {l2,v2} ... ;

you can put a \ to mark a continuation line.  Next line must begin with {

} while ( ready(phase_for_receiver) == P_PROGRAM_CALC);

done();
return 0;
}



a few issues.  values are always integers, with the max number of bits
specified by the device in the h_config.h file.  Except for devices
AMP1, AMP2, AMP3 and PHASE1, PHASE2, and PHASE3.  These are floats,
the amplitudes should be between 0 and 1, phases can have any value,
they get modulo 360.

phase for receiver should be an integer (0,1,2,3)

amplitude and phase values for the new transmitter require an extra
pulse on the appropriate clk line to latch the values into the dacs -
this is taken care of transparently, but there are a couple of little
issues.  Amplitude and phase events get split into two for clocking
purposes.  The dac values get loaded into the previous event and the
current event, the clock toggle is set for the previous and current
event, and then the event of interest is split into two events - one
long one, and one a single counter cycle long.  A side effect: any
amplitude or phase setting event is a minimum of 2 counter cycles
long.


logical channels selected with ch A, B, C (hardware)  1,2,3 (logical in program) 
These channels affect the rf gate, amplitude, phase and blanking, but not the synthesizers.



Calibrating transmitter phases and amplitudes:

From head of pulse.c
  A few notes on the amplitude and phase correction schemes for the new RF transmitters:

  1) amplitude was easy:  collect data at different amplitude
     settings: with _AMP = 0 to 1023. 
     then fit it with a tanh, put the inverse in here.  no problem.
  2) phase was not really harder...
    a) to feed transmitter output through atten ( 40-60dB or so?) then
     into receiver. using pulse program phase_sweep, with dwell = 25u,
     pw1 = 50u. 
    b) export the data - make sure the first point in the data file
     corresponds to phase = 0
    b) use read_phases to read them out (always reads from acq_tempexport.txt)
    c) reverse_pairs to reverse them. - reads from stdin, use pipes:
     < infile >outfile

    presto.  the files that we look to for the phase lookups are:
    /usr/src/Xnmr/current/correct_phaseN.txt
    where the N is a 1 2 or 3.

notes: phase_sweep starts off at -5 deg, so you'll want to left shift
to there before exporting 

December 2, 2005

Support for gradient driver added.  Uses infrastructure for amp and phase 
of rf.   Pulse progs set gradient amplitudes with {GRADX,1.0} or GRADY, or 
GRADZ, and the value is between -1.0 and 1.0.  {GRAD_ON,1} turns on all
three gradients.  For now, the gradients are programmed through one pair of
pulse programmer cables that would have gone to one of the rf channels.
Xnmr figures out at pulse program start time which rf channel this takes the
place of, by looking at which rf channel is not selected for use with the 
1A, 1B, 1C, 2A, 2B, 2C radio buttons.

use SYNC_DSP somewhere shortly before acquisition starts to hit the sync
on the decimation stages in the receiver.


Differences with new spectrometer: MSL200

documentation of LOOP JSR, etc? in pulse-pb.c
BRANCH [label]
jumps to code marked by {LABEL,label}
LOOP [# times] {LABEL,label}
starts a hardware loop. Need to assign a name for the END_LOOP to
reference

END_LOOP[label]
End of hardware loop. 

JSR[label]

RTS

STOP
WAIT

Events with labels that are jumped to by a BRANCH or JSR should not
request synth events (FREQ, PHASE, AMP) since those events get broken
up and placed in the previous event, which we can't do for something
that is the target of a JSR or BRANCH. The same is true for LOOP
events - the synth setup will only happen on the first time through
the loop.


phase/freq/amp events get updated right at the start of the specified
event (I think).

SYNC_DSP is relaced with insert_dsp_sync();


- AMP and PHASE of channel supplying the LO must be set to sane values
(eg 1.0 and 0.0) when acquiring data. Sometimes its best to set both
channels to the same frequency and use the LO from the other one...

- Have required two interrupt events - one after data is finished acquiring,
second when program is complete. With new arduino-Due based acquisition
readout, the first of these is not needed. For compatability, it is still
expected. Pulse programs can call: set_receiver_model_stream(), and then they
should omit the first interrupt event. CAVEAT. At the moment (Sept 2015) this
seems to add extra noise - needs to be investigated.

- noisy mode revamped and working! Pulse programs can call
pprog_is_noisy().  When that's done, the program should generate no
interrupts. In this mode, the program should generate
block_size+dummy_scans sets of data (or num_acqs+dummy_scans if
block_size is 0). dummy_scans get run at the start of each block.
newnoisy.x is a decent example. Works up to 4k sequence lengths!
Could maybe get longer. The AD9984 synths support single line phase or
frequency switching.  Could use it!
